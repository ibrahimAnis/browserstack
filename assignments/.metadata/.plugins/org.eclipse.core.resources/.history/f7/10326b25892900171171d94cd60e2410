class Plateau
  def initialize(w, h)
    @w = w
    @h = h
    @rover = nil
    @rovers = Array.new()
  end
  
  def start(x, y, d)
    @rover = Rover.new(x, y, d)
    @rovers << rover
  end
  
  def move(step)
    #TODO: step logic here
    case step
    when "M"
      (new_x, new_y, new_d) = move_step(@rover.d)
      if valid_move(new_x, new_y, new_d)
        x, y, d = new_x, new_y, new_d
      end
    when "L" || "R"
      new_d = change_d(step)
      d = new_d
    end
  end
  
  def get_rover_position
    return @rover.x, @rover.y, @rover.d
  end
  
  private
  def valid_move(x, y, d)
    #TODO: check for plateau boundaries
    #TODO: check for existing rover position
    return true
  end
  
  def move_step(x, y, d)
    case d
    when "N"
      return (x, y+1, d)
    when "E"
      return (x+1, y, d)
    when "S"
      return (x, y-1, d)
    when "W"
      return (x-1, y, d)
    end
  end
end

class Rover
  attr_accessor :x
  attr_accessor :y
  attr_accessor :d
  
  def initialize(x, y, d)
    @x = x
    @y = y
    @d = d
  end
end