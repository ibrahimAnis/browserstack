'''
Key Server problem:
Write a server which can generate random api keys, assign them for usage and 
release them after sometime.

Following endpoints should be available on the server to interact with it.
Apart from these endpoints, following rules should be enforced:

No endpoint call should result in an iteration of whole set of keys i.e. 
no endpoint request should be O(n). They should either be O(lg n) or O(1).
'''
require 'sinatra'
require 'redis'
#require 'json'
require 'securerandom'

redis = Redis.new
keys = Hash.new()
available = Array.new()

class Key
  attr_reader :id
  attr_reader :is_blocked
  attr_reader :is_dead

  def initialize(id)
    @id = id
    @keep_alive_timestamp = Time.now
    @is_blocked = false
    @blocked_timestamp = nil
    @is_dead = false
  end
  
  def keep_alive(timestamp)
    @keep_alive_timestamp = timestamp
  end
  
  def block(timestamp)
    @is_blocked = true
    @blocked_timestamp = timestamp
  end
  
  def release
    @is_blocked = false
    @blocked_timestamp = nil
  end
  
  def dead
    @is_dead = true
  end
end

#  E1. There should be one endpoint to generate keys.
get '/e1' do
  id = SecureRandom.hex(64)
  key = Key.new(id)
  #keys[id] = key
  redis.set(id.to_s, key.to_json)
  available.push(id)
  [200]
end

#E2. There should be an endpoint to get an available key. 
#    On hitting this endpoint server should serve a random key which is not already being used.
#    This key should be blocked and should not be served again by E2, till it is in this state
#    If no eligible key is available then it should serve 404.
get '/e2' do
  id = available.shift
  if id != nil
    key = JSON.parse(redis.gettext(id.to_s))
    if !keys[id].is_dead
      keys[id].block(Time.now)
      [200, id]
    end
  else
    [404]
  end
end

#E3. There should be an endpoint to unblock a key. 
#    Unblocked keys can be served via E2 again.
# R1. All blocked keys should get released automatically within 60 secs if E3 is not called.
get '/e3/:id' do
  id = params[id]
  keys[id].release
  available.push(id)
  # TODO: fire delayed_job to release a key after 60 secs
  [200]
end

#E4. There should be an endpoint to delete a key. 
#    Deleted keys should be purged.
delete '/e4/:id' do
  id = params[id]
  keys[id].dead
  keys.delete!(id)
  [200]
end

#E5. All keys are to be kept alive by clients calling this endpoint every 5 minutes.
#    If a particular key has not received a keep alive in last five minutes then it should
#    be deleted and never used again.
put '/e5/:id' do
  id = params[id]
  keys[id].keep_alive(Time.now)
  # TODO: fire delayed_job to delete key after 5 mins
  [200]
end